package com.business.service.impl;

import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import net.sf.json.JSONObject;

import org.apache.ibatis.session.SqlSession;
import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.business.entity.Things;
import com.business.entity.ThingsFile;
import com.business.entity.ThingsFinish;
import com.business.entity.ThingsThingsFinish;
import com.business.entity.User;
import com.business.service.SellManager;
import com.business.service.ThingsManager;

@Service
@Transactional
public class ThingsManagerImpl implements ThingsManager {
	@Autowired
	private SqlSessionTemplate sqlSession;

	@SuppressWarnings("unchecked")
	@Override
	public List<ThingsThingsFinish> findUserThingsList(
			HashMap<String, Object> param) {
		List<ThingsThingsFinish> list = (List<ThingsThingsFinish>) sqlSession
				.selectList("ThingsFinish.findAllThings", param);
		for (ThingsThingsFinish f : list) {
			User user = (User) sqlSession.selectOne("User.findUserBaseInfo",
					f.getCreateUserId());
			f.setCreateUserName(user.getName());
			Calendar ce = Calendar.getInstance();
			Calendar cf = Calendar.getInstance();
			cf.setTime(f.getFinishTime() == null ? f.getStartTime() : f
					.getFinishTime());
			if (f.getEndTime().before(new Date())) {
				f.setOutDate("-1");
				ce.setTime(f.getEndTime());
			} else if (f.getStartTime().after(new Date())) {
				Long blong = (f.getStartTime().getTime())
						- (new Date().getTime());
				int days = (int) (blong / 24 / 60 / 60 / 1000) + 1;
				f.setOutDate(days + "");
			} else {
				f.setOutDate("0");
			}
			int years = ce.get(Calendar.YEAR) - cf.get(Calendar.YEAR);
			if (f.getPeriodType() == 0) {
			} else if (f.getPeriodType() == 1) {
				int days = ce.get(Calendar.DAY_OF_YEAR)
						- cf.get(Calendar.DAY_OF_YEAR);
				if ((days > 0 && years == 0) || years > 0) {
					f.setIsFinish("F");
					f.setFinishTime(null);
				}
			} else if (f.getPeriodType() == 2) {
				int weeks = ce.get(Calendar.WEEK_OF_YEAR)
						- cf.get(Calendar.WEEK_OF_YEAR);
				if ((weeks > 0 && years == 0) || years > 0) {
					f.setIsFinish("F");
					f.setFinishTime(null);
				}
			} else if (f.getPeriodType() == 3) {
				int month = ce.get(Calendar.MONTH) - cf.get(Calendar.MONTH);
				if ((month > 0 && years == 0) || years > 0) {
					f.setIsFinish("F");
					f.setFinishTime(null);
				}
			} else if (f.getPeriodType() == 4) {
				if (years > 0) {
					f.setIsFinish("F");
					f.setFinishTime(null);
				}
			}
			if (f.getCreateUserId() == f.getFinishUserId()) {
				if (f.getIsEmergency().equals("T")) {
					f.setThingType(1);
				} else {
					f.setThingType(2);
				}
			} else {
				if (f.getIsEmergency().equals("T")) {
					f.setThingType(3);
				} else {
					f.setThingType(4);
				}
			}
		}
		return list;
	}

	@Override
	public Object findUserThingsListCount(HashMap<String, Object> param) {
		return sqlSession.selectList("ThingsFinish.findAllThingsCount", param);
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public Things findThingsInfo(HashMap map) {
		Things t = (Things) sqlSession
				.selectOne("Things.findCreateThings", map);
		User user = (User) sqlSession.selectOne("User.findUserBaseInfo",
				t.getCreateUserId());
		t.setCreateUserName(user.getName());
		List<ThingsFinish> finishs = (List<ThingsFinish>) sqlSession
				.selectList("ThingsFinish.findUsersByThingsId", map);
		for (ThingsFinish f : finishs) {
			User user1 = (User) sqlSession.selectOne("User.findUserBaseInfo",
					f.getFinishUserId());

			f.setFinishUserName(user1.getName());
			Calendar ce = Calendar.getInstance();
			Calendar cf = Calendar.getInstance();
			cf.setTime(f.getFinishTime() == null ? t.getStartTime() : f
					.getFinishTime());
			if (t.getEndTime().before(new Date())) {
				t.setOutDate("-1");
				ce.setTime(t.getEndTime());
			} else if (t.getStartTime().after(new Date())) {
				Long blong = (t.getStartTime().getTime())
						- (new Date().getTime());
				int days = (int) (blong / 24 / 60 / 60 / 1000) + 1;
				t.setOutDate(days + "");
			} else {
				t.setOutDate("0");
			}
			int years = ce.get(Calendar.YEAR) - cf.get(Calendar.YEAR);
			if (t.getPeriodType() == 0) {
				if (f.getIsFinish() == null || "F".equals(f.getIsFinish())) {
					f.setFinishTime(null);
				}
			} else if (t.getPeriodType() == 1) {
				int days = ce.get(Calendar.DAY_OF_YEAR)
						- cf.get(Calendar.DAY_OF_YEAR);
				if ((days > 0 && years == 0) || years > 0) {
					f.setIsFinish("F");
					f.setFinishTime(null);
				}
			} else if (t.getPeriodType() == 2) {
				int weeks = ce.get(Calendar.WEEK_OF_YEAR)
						- cf.get(Calendar.WEEK_OF_YEAR);
				if ((weeks > 0 && years == 0) || years > 0) {
					f.setIsFinish("F");
					f.setFinishTime(null);
				}
			} else if (t.getPeriodType() == 3) {
				int month = ce.get(Calendar.MONTH) - cf.get(Calendar.MONTH);
				if ((month > 0 && years == 0) || years > 0) {
					f.setIsFinish("F");
					f.setFinishTime(null);
				}
			} else if (t.getPeriodType() == 4) {
				if (years > 0) {
					f.setIsFinish("F");
					f.setFinishTime(null);
				}
			}
		}
		t.setUserList(finishs);
		List<ThingsFile> files = (List<ThingsFile>) sqlSession.selectList(
				"ThingsFile.findFileByThingsId", map);
		t.setThingFileList(files);
		return t;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public List<ThingsFile> findThingsFileList(HashMap map) {
		return (List<ThingsFile>) sqlSession.selectList(
				"ThingsFile.findFileByThingsId", map);
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public List<ThingsFinish> findThingsFinishList(HashMap map) {
		return (List<ThingsFinish>) sqlSession.selectList(
				"ThingsFinish.findUsersByThingsId", map);
	}

	@Override
	public synchronized void updateThingsInfo(Things t, List<String> addUsers,
			List<String> deleteUsers) {
		if (t.getThingsId() == null || t.getThingsId() == 0) {
			sqlSession.insert("Things.insertThingsInfo", t);
			Long thingsId = (Long) sqlSession.selectOne(
					"Things.selectThingsId", t);
			if (addUsers != null && addUsers.size() > 0) {
				for (String userId : addUsers) {
					ThingsFinish f = new ThingsFinish();
					f.setDeleteFlag(1);
					f.setFinishTime(null);
					f.setFinishUserId(Long.valueOf(userId));
					f.setIsFinish("F");
					f.setThingsId(thingsId);
					sqlSession.insert("ThingsFinish.addThingsFinish", f);
				}
			}

		} else {
			sqlSession.update("Things.updateThingsInfo", t);

			if (addUsers != null && addUsers.size() > 0) {
				for (String userId : addUsers) {
					ThingsFinish f = new ThingsFinish();
					f.setDeleteFlag(1);
					f.setFinishTime(null);
					f.setFinishUserId(Long.valueOf(userId));
					f.setIsFinish("F");
					f.setThingsId(t.getThingsId());
					sqlSession.insert("ThingsFinish.addThingsFinish", f);
				}
			}
			if (deleteUsers != null && deleteUsers.size() > 0) {
				for (String userId : deleteUsers) {
					ThingsFinish f = new ThingsFinish();
					f.setDeleteFlag(2);
					f.setFinishTime(null);
					f.setFinishUserId(Long.valueOf(userId));
					f.setIsFinish("F");
					f.setThingsId(t.getThingsId());
					sqlSession.update("ThingsFinish.updateThingsFinish", f);
				}
			}

		}

	}

}
