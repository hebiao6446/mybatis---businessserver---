package com.business.action;

import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.struts2.ServletActionContext;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.factory.annotation.Autowired;

import cn.eavic.framework.web.BaseAction;

import com.business.entity.Company;
import com.business.entity.Product;
import com.business.entity.ProductCategory;
import com.business.entity.Sell;
import com.business.entity.User;
import com.business.service.ProductManager;
import com.business.service.SellManager;
import com.business.service.UserManager;
import com.common.Commonparam;
import com.json.BaseBean;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;

@Namespace("/")
@Results({ @Result(name = BaseAction.NONE, location = "sellAction.action", type = "redirect") })
public class SellAction extends ActionSupport {

	private static final long serialVersionUID = 1L;

	@Autowired
	SellManager sellManager;
	@Autowired
	UserManager userManager;
	@Autowired
	ProductManager productManager;

	private String userId;
	private Integer size, page;

	public void findUserSellList() throws Exception {
		HttpServletResponse response = (HttpServletResponse) ActionContext
				.getContext().get(ServletActionContext.HTTP_RESPONSE);
		HttpServletRequest request = (HttpServletRequest) ActionContext
				.getContext().get(ServletActionContext.HTTP_REQUEST);
		User user = (User) request.getSession().getAttribute("user");
		BaseBean bean = new BaseBean();

		try {
			HashMap<String, Object> param = new HashMap<String, Object>();
			param.put("size", size);
			param.put("startIndex", (page - 1) * size);

			if (userId == null || userId.trim().equals("")) {
				param.put("userId", user.getUserId());
				String roleIds = userManager.findChildrenRole(user.getUserId());
				if (roleIds == null || roleIds.trim().length() == 0) {
					roleIds = "-1";
				}
				param.put("roleIds", roleIds);
			} else {
				param.put("userId", userId);
				param.put("roleIds", "-1");
			}
			List<Sell> list = sellManager.findUserSellList(param);
			bean.setTotal(sellManager.findUserSellListCount(param));
			bean.setRows(list);
			bean.setStatus(200);
		} catch (Exception e) {
			e.printStackTrace();
		}
		String json = JSONObject.fromObject(bean, Commonparam.getJsonConfig())
				.toString();
		response.getOutputStream().write(json.getBytes("UTF-8"));
	}

	public void findUserSellInfo() throws Exception {
		HttpServletResponse response = (HttpServletResponse) ActionContext
				.getContext().get(ServletActionContext.HTTP_RESPONSE);
		HttpServletRequest request = (HttpServletRequest) ActionContext
				.getContext().get(ServletActionContext.HTTP_REQUEST);
		User user = (User) request.getSession().getAttribute("user");
		Company company = (Company) request.getSession()
				.getAttribute("company");
		String gotoPage = "pages/sellManagerUpdate.jsp";
		try {
			HashMap<String, Object> param = new HashMap<String, Object>();
			param.put("companyId", company.getCompanyId());
			List<Product> list = productManager.findProductList(param);			
			request.setAttribute("productList", list);
			request.getRequestDispatcher(gotoPage).forward(request, response);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public String getUserId() {
		return userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

	public Integer getSize() {
		return size;
	}

	public void setSize(Integer size) {
		this.size = size;
	}

	public Integer getPage() {
		return page;
	}

	public void setPage(Integer page) {
		this.page = page;
	}

}
