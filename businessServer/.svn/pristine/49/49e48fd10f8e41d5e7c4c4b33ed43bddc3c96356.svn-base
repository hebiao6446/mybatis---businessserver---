package com.business.service.impl;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import net.sf.json.JSONObject;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionTemplate;
import org.mybatis.spring.support.SqlSessionDaoSupport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.common.Commonparam;
import com.business.entity.Company;
import com.business.entity.Contacts;
import com.business.entity.Group;
import com.business.entity.User;
import com.business.service.ContactsManager;
import com.business.service.UserManager;
import com.json.BaseBean;

@Service
@Transactional
public class ContactsManagerImpl implements ContactsManager {
	@Autowired
	private SqlSessionTemplate sqlSession;

	@Override
	public List<Group> findGroupList(HashMap<String, Object> param) {
		Object obj = sqlSession.selectList("Group.findGroupList", param);
		return (List<Group>) obj;
	}

	@Override
	public Object findGroupListCount(HashMap<String, Object> param) {
		Object obj = sqlSession.selectOne("Group.findGroupListCount", param);
		return obj;
	}

	@Override
	public void updateGroupInfo(HashMap param) {
		if (param.get("groupId") != null && param.get("groupId").toString().trim().length() > 0) {
			sqlSession.update("Group.updateGroupInfo", param);
		} else {
			sqlSession.insert("Group.insertGroupInfo", param);

		}
	}

	@Override
	public List<Contacts> findGroupContactsList(HashMap<String, Object> param) {
		Object obj = sqlSession.selectList("Contacts.findGroupContactsList", param);
		return (List<Contacts>) obj;
	}


	@Override
	public Object findGroupContactsListCount(HashMap<String, Object> param) {
		Object obj = sqlSession.selectOne("Contacts.findGroupContactsListCount", param);
		return obj;
	}

	@Override
	public void updateContactsInfo(HashMap param) {
		if (param.get("contactsId") != null && param.get("contactsId").toString().trim().length() > 0) {
			sqlSession.update("Contacts.updateContactsInfo", param);
		} else {
			sqlSession.insert("Contacts.insertContactsInfo", param);

		}
	}

	@Override
	public Contacts findContactsInfoByField(HashMap param) {
		// TODO Auto-generated method stub
		return (Contacts) sqlSession.selectOne("Contacts.findContactsInfoByField",param);
	}

	@Override
	public List<HashMap> findMySubContactsList(HashMap param) {
		String roleids = (String) sqlSession.selectOne("Contacts.findSubRoleIdList", param);
		if (roleids == null || roleids.trim().length() == 0) {
			return Collections.EMPTY_LIST;
		}
		List<HashMap> list = (List<HashMap>) sqlSession.selectList("User.findMySubContactsList", roleids);
		return list;
	}



}
