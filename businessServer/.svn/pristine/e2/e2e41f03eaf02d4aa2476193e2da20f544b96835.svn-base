package com.business.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import net.sf.json.JSONObject;

import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


import com.business.entity.AttendDescript;
import com.business.entity.Attendance;
import com.business.entity.User;
import com.business.service.AttendanceManager;

@Service
@Transactional
public class AttendanceManagerImpl  implements AttendanceManager {
	@Autowired
	private SqlSessionTemplate  sqlSession;

	@Override
	public List<Attendance> findAttendanceList(HashMap<String, Object> param) {
		
		Integer size = (Integer) param.get("size");
		Integer page = (Integer) param.get("page");
		String fontTime = param.get("fontTime")==null?null:param.get("fontTime").toString();
		String backTime = param.get("backTime")==null?null:param.get("backTime").toString();
		
		java.sql.Date date = null;
		JSONObject map = new JSONObject();
		if (fontTime != null && !"".equals(fontTime)) {
			date = new java.sql.Date(java.sql.Date.valueOf(fontTime).getTime()
					- (page - 1) * 24 * 60 * 60 * 1000*size);
		} else {
			date = new java.sql.Date(new Date().getTime() - (page - 1) * 24
					* 60 * 60 * 1000*size);
		}
		if (backTime != null && !"".equals(backTime)) {
			if (java.sql.Date.valueOf(backTime).before(
					new java.sql.Date(date.getTime() - size * 24 * 60 * 60
							* 1000))) {
				long e = java.sql.Date.valueOf(backTime).getTime()
						- date.getTime();
				size = (int) (e / 1000 / 60 / 60 / 24);
			}
		}
		List<String> t = new ArrayList<String>();
		for (int i = 0; i < size; i++) {
			t.add(new java.sql.Date(date.getTime() - i * 24 * 60 * 60 * 1000)
					.toString());
		}
		param.put("t", t);
		List<Attendance> list = (List<Attendance>) sqlSession.selectList("Attendance.findAttendanceList", param);
		return list;
	}
	
	
	@Override
	public Object findAttendanceListCount(HashMap<String, Object> param) {
		Object obj = sqlSession.selectOne("Attendance.findAttendanceListCount", param);
		return obj;
	}

	@Override
	public User findUserBaseInfo(Long userId) {
		return (User) sqlSession.selectOne("User.findUserBaseInfo",userId);
	}

	@Override
	public List<AttendDescript> findAttendDescriptList(
			HashMap<String, Object> param) {
		Object obj = sqlSession.selectList("AttendDescript.findAttendDescriptList", param);
		return (List<AttendDescript>) obj;
	}

	@Override
	public Object findAttendDescriptListCount(HashMap<String, Object> param) {
		Object obj = sqlSession.selectOne("AttendDescript.findAttendDescriptListCount", param);
		return obj;
	}

		

}
